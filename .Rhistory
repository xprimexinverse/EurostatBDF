setwd("C:/Users/xprimexinverse/Programming/R/My Packages/EurostatBDF/R")
download.file(paste0(base_url, data_query, tab_name, filext[1]), temp_tsv)
download.file("www.xprimexinverse.eu/an_r_file.r")
download.file("www.xprimexinverse.eu/an_r_file.r", destfile = getwd())
library(EurostatBDF)
# New environment
EurostatBDF.env <- new.env()
# Eurostat Bulk Download Facility URL
EurostatBDF.env$base_url <- "http://ec.europa.eu/eurostat/estat-navtree-portlet-prod/BulkDownloadListing"
# Query strings
EurostatBDF.env$data_query <- "?sort=1&file=data%2F"
EurostatBDF.env$dic_query  <- "?sort=1&file=dic%2Fen%2F"
EurostatBDF.env$home_query <- "?sort=1&file="
# Table dictionary
EurostatBDF.env$tdic_name <- "table_dic"
# Table of contents
EurostatBDF.env$toc_name <- "table_of_contents_en"
# File extensions
EurostatBDF.env$filext <- c(".tsv.gz",".sdmx.zip",".dic",".sdmx.xml",".txt")
# Flags in database
EurostatBDF.env$flags <- "[[:space:]]+[bcdefnprsuz]"
# Functions ---------------------------------------------------------------
#' @title Get dictionary file from Eurostat Bulk Download Facility
#' @description Reads a Eurostat dictionary file into R as a two-column dataframe
#' @param dic The name of the dictionary file of interest
#' @export
#' @author Graeme Walsh
#' @details The dictionary file is read from the /dic/en sub-folder
getDic <- function(dic) {
dic <- read.table(paste0(EurostatBDF.env$base_url, EurostatBDF.env$dic_query, dic, EurostatBDF.env$filext[3]), sep = "\t", quote = "", col.names = c("Code", "Label"))
return(dic)
}
toc <- read.table(paste0(EurostatBDF.env$base_url, EurostatBDF.env$home_query, EurostatBDF.env$toc_name, EurostatBDF.env$filext[5]), sep = "\t", quote = "", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
toc <- read.table(paste0(EurostatBDF.env$base_url, EurostatBDF.env$home_query, EurostatBDF.env$toc_name, EurostatBDF.env$filext[5]), sep = "\t", quote = "\"", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
View(toc)
dic <- read.table(paste0(EurostatBDF.env$base_url, EurostatBDF.env$dic_query, dic, EurostatBDF.env$filext[3]), sep = "\t", quote = "", col.names = c("Code", "Label"))
tdic <- read.table(paste0(EurostatBDF.env$base_url, EurostatBDF.env$dic_query, EurostatBDF.env$tdic_name, EurostatBDF.env$filext[3]), sep = "\t", quote = "", col.names = c("Code", "Label"))
# New environment
EurostatBDF.env <- new.env()
# Eurostat Bulk Download Facility URL
EurostatBDF.env$base_url <- "http://ec.europa.eu/eurostat/estat-navtree-portlet-prod/BulkDownloadListing"
# Query strings
EurostatBDF.env$data_query <- "?sort=1&file=data%2F"
EurostatBDF.env$dic_query  <- "?sort=1&file=dic%2Fen%2F"
EurostatBDF.env$home_query <- "?sort=1&file="
# Table dictionary
EurostatBDF.env$tdic_name <- "table_dic"
# Table of contents
EurostatBDF.env$toc_name <- "table_of_contents_en"
# File extensions
EurostatBDF.env$filext <- c(".tsv.gz",".sdmx.zip",".dic",".sdmx.xml",".txt")
# Flags in database
EurostatBDF.env$flags <- "[[:space:]]+[bcdefnprsuz]"
tdic <- read.table(paste0(EurostatBDF.env$base_url, EurostatBDF.env$dic_query, EurostatBDF.env$tdic_name, EurostatBDF.env$filext[3]), sep = "\t", quote = "", col.names = c("Code", "Label"))
View(tdic)
sapply(tdic, class)
tdic <- read.table(paste0(EurostatBDF.env$base_url, EurostatBDF.env$dic_query, EurostatBDF.env$tdic_name, EurostatBDF.env$filext[3]), sep = "\t", quote = "", stringsAsFactors = FALSE, col.names = c("Code", "Label"))
sapply(tdic, class)
View(tdic)
tdic <- read.table(paste0(EurostatBDF.env$base_url, EurostatBDF.env$dic_query, EurostatBDF.env$tdic_name, EurostatBDF.env$filext[3]), sep = "\t", quote = "", stringsAsFactors = FALSE, col.names = c("Code", "Label"))
getDic <- function(dic) {
dic <- read.table(paste0(EurostatBDF.env$base_url, EurostatBDF.env$dic_query, dic, EurostatBDF.env$filext[3]), sep = "\t", quote = "", stringsAsFactors = FALSE, col.names = c("Code", "Label"))
return(dic)
}
x <- getDic("geo")
View(x)
toc <- read.table(paste0(EurostatBDF.env$base_url, EurostatBDF.env$home_query, EurostatBDF.env$toc_name, EurostatBDF.env$filext[5]), sep = "\t", quote = "\"", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
View(toc)
library(EurostatBDF)
library(EurostatBDF)
library(EurostatBDF)
toc <- getToc()
tdic <- getTdic()
View(toc)
View(tdic)
View(toc)
geo <- getDic("geo")
head(geo)
nama_10_gdp <- getEurostatRaw("nama_10_gdp","tsv")
View(nama_10_gdp)
nama_10_gdp <- getEurostatRaw("nama_10_gdp","sdmx")
library(EurostatBDF)
nama_10_gdp <- getEurostatRaw("nama_10_gdp","sdmx")
nama_10_gdp <- getEurostatRaw("nama_10_gdp")
library(EurostatBDF)
nama_10_gdp <- getEurostatRaw("nama_10_gdp")
nama_10_gdp_tidy <- tidyRawData(nama_10_gdp)
library(EurostatBDF)
nama_10_gdp <- getEurostatRaw("nama_10_gdp")
nama_10_gdp_tidy <- tidyRawData(nama_10_gdp)
View(nama_10_gdp_tidy)
View(nama_10_gdp)
class(nama_10_gdp)
class(nama_10_gdp) <- "EurostatBDF_TSV"
class(nama_10_gdp)
View(nama_10_gdp)
nama_10_gdp <- getEurostatRaw("nama_10_gdp")
attributes(nama_10_gdp)
attributes(nama_10_gdp)[1]
attributes(nama_10_gdp)[2]
attributes(nama_10_gdp)[3]
attributes(nama_10_gdp)[4]
class(nama_10_gdp)
?comment
Eurostat_Dataset <- list()
Eurostat_Dataset[[1]] <- nama_10_gdp
Eurostat_Dataset[[2]] <- nama_10_gdp_tidy
View(Eurostat_Dataset)
?melt
nama_10_gdp <- getEurostatRaw("nama_10_gdp")
nama_10_gdp_tidy <- tidyRawData(nama_10_gdp)
tidy_data <- nama_10_gdp_tidy
dims <- strsplit(sub("\\\\", ",", names(tidy_data)[1]), split = ",")[[1]]
dims
meta <- apply(matrix(unlist(strsplit(tidy_data[,1], split = ",")), ncol = length(dims)-1, byrow = TRUE), 2 , unique)
meta
names(meta) <- dims[1:length(dims)-1]
names(meta)
dims
# Get the dictionary files
dics <- lapply(dims[1:length(dims)-1], getDic)
View(dics)
# Get the dictionary files
dics <- lapply(dims[1:length(dims)-1], getDic, names = dims[1:length(dims)-1])
>lapply
?lapply
# Get the dictionary files
dics <- lapply(dims[1:length(dims)-1], getDic, USE.NAMES= TRUE)
# Get dataset dimensions (e.g. geo, unit)
dims <- strsplit(sub("\\\\", ",", names(tidy_data)[1]), split = ",")[[1]]
dims
dims <- dims[-length(dims)]
dims
library(EurostatBDF)
toc <- getToc()
head(toc)
toc[,2]=="nama_10_gdp"
which(toc[,2]=="nama_10_gdp")
which(toc[,2]=="nama_10_gdp")[1]
which(toc[,2]=="nama_10_gdp")[2]
toc[which(toc[,2]=="nama_10_gdp"),]
toc[which(toc[,2]=="namq_10_gdp"),]
unique(toc[which(toc[,2]=="namq_10_gdp"),])
toc[which(toc[,2]=="namq_10_gdp"),][1]
toc[which(toc[,2]=="namq_10_gdp"),][1,]
toc[which(toc[,"code"]=="namq_10_gdp"),][1]
toc[which(toc[,"code"]=="namq_10_gdp"),][1,]
library(EurostatBDF)
nama_10_gdp <- createEurostatDataset("nama_10_gdp")
View(nama_10_gdp)
head(nama_10_gdp$data)
name(nama_10_gdp)
names(nama_10_gdp)
nama_10_gdp$code_lists
nama_10_gdp$code_lists[["geo"]]
nama_10_gdp$metadata
nama_10_gdp$data[1:5,]
nama_10_gdp$code_lists
names(nama_10_gdp$code_lists)
nama_10_gdp$code_lists[["geo"]]
nama_10_gdp$code_lists[["geo"]][1:5]
nama_10_gdp$code_lists[["geo"]][1:5,]
nama_10_gdp$code_lists[["geo"]][1:10,]
View(nama_10_gdp)
nama_10_gdp$code_lists[["geo"]][1:10,]
nama_10_gdp[["code_lists"]][["unit"]][["Label"]]
View(nama_10_gdp[["code_lists"]][["unit"]])
View(toc)
x <- getMeta("nama_10_gdp")
View(x)
x[,"data start"]
x[,"data end"]
x_period <- x[,c("data start", "data end")]
View(x_period)
if(grepl("Q",time_period)) {
freq <- "Q"
}else if(grepl("M",time_period)){
freq <- "M"
} else{
freq <- "A"
}
time_period <- x[,c("data start", "data end")]
if(grepl("Q",time_period)) {
freq <- "Q"
}else if(grepl("M",time_period)){
freq <- "M"
} else{
freq <- "A"
}
time_period <- x[,c("data start", "data end")]
if(grepl("Q",time_period[1])) {
freq <- "Q"
}else if(grepl("M",time_period[1])){
freq <- "M"
} else{
freq <- "A"
}
freq
time_period
class(time_period)
cbind(time_period,freq)
class(cbind(time_period,freq))
!grepl("\\D", time_period[1])
!grepl("\\D", "1909")
!grepl("\\D", "1909s")
time_period <- x[,c("data start", "data end")]
if(grepl("Q", time_period[1])) {
freq <- "Q"
} else if(grepl("M", time_period[1])){
freq <- "M"
} else if(grepl("H", time_period[1])){
freq <- "H"
} else if(grepl("W", time_period[1])){
freq <- "W"
} else if(grepl("D", time_period[1])){
freq <- "D"
} else if(grepl("\\D", time_period[1])){
freq <- "A"
} else{
freq <- "Unknown"
}
time_period <- x[,c("data start", "data end")]
if(grepl("Q", time_period[1])) {
freq <- "Q"
} else if(grepl("M", time_period[1])){
freq <- "M"
} else if(grepl("H", time_period[1])){
freq <- "H"
} else if(grepl("W", time_period[1])){
freq <- "W"
} else if(grepl("D", time_period[1])){
freq <- "D"
} else if(!grepl("\\D", time_period[1])){
freq <- "A"
} else{
freq <- "Unknown"
}
library(EurostatBDF)
getPeriod("nama_10_gdp")
getPeriod("namq_10_gdp")
nama_10_gdp <- getEurostatRaw("nama_10_gdp")
nama_10_gdp_tidy <- tidyRawData(nama_10_gdp)
tidy_data <- nama_10_gdp_tidy
# Get dataset dimensions (e.g. geo, unit)
dims <- strsplit(sub("\\\\", ",", names(tidy_data)[1]), split = ",")[[1]]
dims <- dims[-length(dims)]
# Get dataset dimension values (e.g. IE, PC_GDP)
dim_vals <- apply(matrix(unlist(strsplit(tidy_data[,1], split = ",")), ncol = length(dims), byrow = TRUE), 2 , unique)
View(dim_vals)
View(dim_vals)
# Get the dictionary files
dics <- lapply(dims, getDic)
# Split the dimension values into separate columns
var_id    <- strsplit(tidy_data[,1], split = ",")
View(var_id)
var_codes <- do.call("rbind", var_id)
View(var_codes)
View(var_codes)
library(EurostatBDF)
tdic <- getTdic()
subset(tdic, startsWith(as.character(Code), "NAMQ_10"))
dataset_names <- c(subset(tdic, startsWith(as.character(Code), "NAMQ_10"))[,1])
raw_datasets <- sapply(dataset_names, getEurostatRaw)
View(raw_datasets)
dataset_names
dataset_names[1]
tolower(raw_datasets)
tolower(dataset_names)
dataset_names <- tolower(c(subset(tdic, startsWith(as.character(Code), "NAMQ_10"))[,1]))
raw_datasets <- sapply(dataset_names, getEurostatRaw)
View(raw_datasets)
raw_datasets[[1]]
View(raw_datasets)
raw_datasets[["NAMQ_10_A10.<!DOCTYPE html PUBLIC -//W3C//DTD XHTML 1.0 Strict//EN http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd>"]]
View(raw_datasets)
subset(tdic, startsWith(as.character(Code), "NAMQ_10"))
raw_datasets <- sapply(dataset_names, getEurostat)
raw_data = FALSE
csv_data = FALSE
(raw_data == FALSE) && (csv_data == FALSE)
x <- getEurostat("nama_10_gdp")
library(EurostatBDF)
toc <- getToc
toc <- getToc()
tdic <- getTdic()
table_name <- "nama_10_gdp"
raw_data <- getEurostatRaw(table_name)
tidy_data <- tidyRawData(raw_data)
metadata <- getMeta(table_name)
code_lists <- getCodeLists(tidy_data)
csv_data <- prepareCSV(tidy_data)
getPeriod(table_name)
period <- getPeriod(table_name)
colhead <- getColhead(csv_data)
colhead$num
colhead$names
View(csv_data)
# Get dataset dimensions (e.g. geo, unit)
dims <- strsplit(sub("\\\\", ",", names(csv_data)[1]), split = ",")[[1]]
dims <- dims[-length(dims)]
# Create the header names
colheadnames <- c("Name", paste0(rep(dims[1:length(dims)], each = 2), c("_code", "_description")))
colheadnames
dims
names(csv_data)
sapply(csv_data, class)
is.character(sapply(csv_data, class))
sapply(csv_data, is.character)
which(sapply(csv_data, is.character))
length(which(sapply(csv_data, is.character)))
names(which(sapply(csv_data, is.character)))
